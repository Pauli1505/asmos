[org 0x7c00]
[bits 16]

section .text

global main

main:
    cli
    jmp 0x0000:ZeroSeg  ; far jump to correct for BIOS putting us in the wrong segment
ZeroSeg:
    xor ax, ax
    mov ss, ax
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov sp, main
    cld
    sti

    ; Reset disk
    xor ax, ax
    mov bx, sTwo
    mov dl, 0x80
    int 0x13

    ; Load sectors from our disk
    mov dl, 0x80
    mov al, 2        ; sectors to read
    mov cl, 2        ; start sector
    mov bx, sTwo     ; offset
    ; es is already 0
    call readDisk

    ; Enable A20 line
    call enableA20

    call print_start
    call print_start0

    ; Initialize the terminal
    call terminal

    jmp $

%include "printf.asm"
%include "readDisk.asm"
%include "printh.asm"
%include "testA20.asm"
%include "enableA20.asm"

LOADING: db 'Loading...', 0x0a, 0x0d, 0
DISK_ERR_MSG: db 'Disk Reading Error!', 0x0a, 0x0d, 0
NO_A20: db 'A20 line: DISABLED!', 0x0a, 0x0d, 0
A20DONE: db 'A20 line: ENABLED!', 0x0a, 0x0d, 0
NO_LM: db 'LM (Long Mode): DISABLED!', 0x0a, 0x0d, 0
YES_LM: db 'LM (Long Mode): ENABLED!', 0x0a, 0x0d, 0
HELLO: db 'Hello, World!', 0x0a, 0x0d, 0

print_start:
    mov si, LOADING
    call printf

print_start0:
    mov si, HELLO
    call printf

; Keyboard handling
get_key:
    xor ax, ax
    int 0x16
    ret

put_char:
    mov ah, 0x0e
    int 0x10
    ret

; Terminal and Command Interpreter
PROMPT: db 'boot> ', 0
UNKNOWN_CMD: db 'Unknown command', 0x0a, 0x0d, 0
NEWLINE: db 0x0a, 0x0d, 0
HELP_MSG: db 'Available commands: echo, clear, help, shutdown', 0x0a, 0x0d, 0

input_buffer times 256 db 0

terminal:
    mov si, PROMPT
    call printf

    ; Read and process user input
    call read_input
    call process_command

    jmp terminal

read_input:
    xor di, di
.read_loop:
    call get_key
    cmp al, 0x0d       ; Enter key
    je .done
    stosb
    call put_char
    jmp .read_loop
.done:
    stosb
    ret

process_command:
    mov si, input_buffer

    ; Compare input with known commands
    call skip_spaces

    cmp byte [si], 'e'
    je check_echo
    cmp byte [si], 'c'
    je check_clear
    cmp byte [si], 'h'
    je check_help
    cmp byte [si], 's'
    je check_shutdown
    jmp unknown_command

check_echo:
    cmp byte [si+1], 'c'
    jne unknown_command
    cmp byte [si+2], 'h'
    jne unknown_command
    cmp byte [si+3], 'o'
    jne unknown_command
    call skip_word
    call echo_command
    jmp command_done

check_clear:
    cmp byte [si+1], 'l'
    jne unknown_command
    cmp byte [si+2], 'e'
    jne unknown_command
    cmp byte [si+3], 'a'
    jne unknown_command
    cmp byte [si+4], 'r'
    jne unknown_command
    call clear_command
    jmp command_done

check_help:
    cmp byte [si+1], 'e'
    jne unknown_command
    cmp byte [si+2], 'l'
    jne unknown_command
    cmp byte [si+3], 'p'
    jne unknown_command
    call help_command
    jmp command_done

check_shutdown:
    cmp byte [si+1], 'h'
    jne unknown_command
    cmp byte [si+2], 'u'
    jne unknown_command
    cmp byte [si+3], 't'
    jne unknown_command
    cmp byte [si+4], 'd'
    jne unknown_command
    cmp byte [si+5], 'o'
    jne unknown_command
    cmp byte [si+6], 'w'
    jne unknown_command
    cmp byte [si+7], 'n'
    jne unknown_command
    call shutdown_command
    jmp command_done

unknown_command:
    mov si, UNKNOWN_CMD
    call printf
    jmp command_done

command_done:
    ret

echo_command:
    call skip_spaces
    mov si, input_buffer
    call printf
    mov si, NEWLINE
    call printf
    ret

clear_command:
    mov ax, 0x0600
    mov bh, 0x07
    mov cx, 0x0000
    mov dx, 0x184f
    int 0x10
    ret

help_command:
    mov si, HELP_MSG
    call printf
    ret

shutdown_command:
    hlt
    ret

skip_spaces:
    .skip_loop:
        cmp byte [si], ' '
        jne .done
        inc si
        jmp .skip_loop
    .done:
        ret

skip_word:
    .skip_loop:
        cmp byte [si], ' '
        je .done
        cmp byte [si], 0
        je .done
        inc si
        jmp .skip_loop
    .done:
        ret

times 2 db 0
dw 0xaa55

sTwo:
    ; Additional code for second sector loading and kernel setup...
    jmp $

%include "checklm.asm"
%include "gdt.asm"
